import os
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from nicegui import ui
from src.ui.interface import configure_ui

def main():
    configure_ui()
    
    ui.run(
        host='0.0.0.0',
        port=7000,
        title='Aquatic Coastal Analysis UI', 
    )

if __name__ in {"__main__", "__mp_main__"}:
    main()



# def test():
#     datasets = load_datasets()
#     # Теперь datasets – это словарь с ключами:
#     # ["countries_50m", "marine_polys_10m", "lakes_50m", "rivers_50m"]
#     # и значениями в виде соответствующих GeoDataFrame.

#     # analyzer = CoastlineAnalyzer(world, marine_polys)

#     # # Определяем прибрежные страны
#     # coastal_info = analyzer.detect_coastal_countries()
#     # print(coastal_info[['name', 'is_coastal']])

#     # # Считаем длину береговой линии
#     # lengths_info = analyzer.calculate_coastline_length()
#     # print(lengths_info[['name', 'coast_length_m']].head())



"""
1. Инициализация проекта
Импортировать все модули и настройки конфигурации.

2.Загрузка и предобработка данных:
    1) с помощью модуля data_loader загружаем данные:
    - географические данные о береговых линиях;
    - исторические данные о уровне моря;
    - спутниковые снимки для детектирования нефтяных пятен;
    - демографические данные и данные о инфраструктуре;

    2) предобработка (очистка и нормализация данных).

3. Анализ прибрежных систем
    - создание экземпляра класса CoastlineAnalyzer;
    - определение прибрежных стран;
    - расчет длины береговых линий;
    - визуализация результатf анализа на карте с помощью MapPlotter.

4. Прогноз уровня моря
    - создание экземпляра класса SeaLevelModel;
    - обучение модели на исторических данных;
    - прогнозируем изменения уровня моря на заданный период (50 лет);
    - отображение графиков прогнозов уровня моря.

5. Пространственная динамика береговой линии
    - создание экземпляра класса CoastlineDynamicsPredictor;
    - использование прогноза уровня моря и данные о рельефе для моделирования изменений береговой линии;
    - визуализация изменения береговой линии в динамике.

6. Детектирование нефтяных пятен
    - создание экземпляра класса OilSpillDetector;
    - загрузка спутниковых снимков и выполнение детектирования нефтяных пятен;
    !!! Идея: статически станции добычи нефти в море. Каждая имеет свою ЭВМ расчета безопасной от берега и важных вещей в море удаленность от берега, для возможности своевременного предотвращения катастрофы. С учетом данных о бассейне (записанных статически) может производиться первичный расчет направления пятна в условиях трагедии заранее;
    - прогнозирование движения пятен на основе текущих атмосферных и океанических условий;
    - визуализация их положения и траекторию на карте.

7. Оценка рисков затопления
    - создание экземпляра класса FloodingRiskAnalyzer;
    - использование прогнозов уровня моря и демографических данных для анализа зон затопления;
    - расчет социально-экономических последствий затопления (численность затронутого населения, объем разрушенной инфраструктуры);
    - отображение результатов анализа на карте.

8. Учет атмосферных параметров и динамики льдов;
    - загрузка данных об атмосферных параметрах (потоки рек, ледовую динамику);
    - интеграция данных в прогнозы модели;
    - визуализация их влияния на морскую акваторию.

9. Сохранение результатов
    1) сохранение промежуточных результатов в папке data/processed.
    2) экспорт окончательные результаты анализа и визуализации в удобные форматы (например, JSON, CSV, PNG).

10. Логирование и отладка
    1) включение логирования процессов с помощью встроенного модуля logging.
"""